#!/bin/bash

# Script to auto build and install jupyterhub Just provide the version

function usage() {
 cat << EOF
Usage: ${0} <VERSION>

 <VERSION> is the specific version number you're building

EOF
}

# Quit the script if it doesn't have enough flags set
if [ $# -lt 1 ]; then
 usage
 exit 1
fi

ROOT=/opt/jupyter
PY3_VER=3.10
JLAB_VER=$1
ENV_NAME=jupyterlab_${JLAB_VER}
JLAB_PATH=${ROOT}/jupyterlab/${JLAB_VER}
CONDA_VER=2024.02-1
CONDA_BIN=${ROOT}/jupyterlab/anaconda3/${CONDA_VER}/bin
JLAB_CONFIG_DIR=${JLAB_PATH}/${ENV_NAME}/etc/jupyter
JHUB_PORT=8080
JHUB_PROTO=http

# Set up directory for this and go into it
mkdir ${ROOT}/jupyterlab
cd ${ROOT}/jupyterlab

# Download and install Anaconda
wget -N https://repo.anaconda.com/archive/Anaconda3-${CONDA_VER}-Linux-x86_64.sh
bash ./Anaconda3-${CONDA_VER}-Linux-x86_64.sh -b -p ${ROOT}/jupyterlab/anaconda3/${CONDA_VER}

# don't rebuild the env if it already exists
CHECK_ENV=$( ${CONDA_BIN}/conda list -n ${ENV_NAME} 2>&1 )

if [[ ${CHECK_ENV} =~ EnvironmentLocationNotFound ]] ;
then
   echo "env ${ENV_NAME} not found, creating it now"

   # can't use both --name and --prefix
   # by default you can't have names in envs that are outside the default
   #${CONDA_BIN}/conda create --yes --no-default-packages  --channel conda-forge --prefix ${JLAB_PATH}/${ENV_NAME} python=${PY3_VER} ipykernel jupyterhub jupyterlab=${JLAB_VER} notebook nodejs jedi python-language-server unixodbc
   ${CONDA_BIN}/conda create --yes --no-default-packages  --channel conda-forge --prefix ${JLAB_PATH}/${ENV_NAME} python=${PY3_VER} ipykernel jupyterlab=${JLAB_VER} jupyterhub nodejs jedi python-language-server configurable-http-proxy unixodbc
 
   # add the env path to the default path so the name becomes visible :-)
   ${CONDA_BIN}/conda config --append envs_dirs ${JLAB_PATH}/${ENV_NAME}

else
   echo "env ${ENV_NAME} already exists, exiting."
   exit 0
fi
# need to set the $PATH or it won't find nodejs
export PATH=${JLAB_PATH}/${ENV_NAME}/bin:${PATH}

# install a load of common libs
${JLAB_PATH}/${ENV_NAME}/bin/python${PY3_VER} -mpip install BeautifulSoup4 biopython bokeh conversion chart-studio cython folium holoviews ipywidgets ipyleaflet keras matplotlib numba numpy pandas plotly polars psycopg2-binary pyodbc pysmb pylint pymysql reportlab rsconnect-jupyter scikit-image scikit-learn scipy snowflake-connector-python tensorflow virtualenv
	#${JLAB_PATH}/${ENV_NAME}/bin/python${PY3_VER} -m pip install conversion keras matplotlib numba numpy pandas plotly psycopg2 pyodbc reportlab scikit-image scikit-learn scikit-learn-intelex scipy ipywidgets jupyterlab-system-monitor
	# ${JLAB_PATH}/${ENV_NAME}/bin/python${PY3_VER} -m pip install conversion keras matplotlib numba numpy pandas plotly psycopg2 pyodbc reportlab scikit-image scikit-learn scipy ipywidgets tensorflow jupyterlab-system-monitor
# install some useful extensions
${JLAB_PATH}/${ENV_NAME}/bin/python${PY3_VER} -mpip install jupyterlab-lsp jupyterlab_widgets sidecar jupyterlab-geojson
#${JLAB_PATH}/${ENV_NAME}/bin/python${PY3_VER} -m pip install jupyter-lsp 'python-language-server[all]'
#${JLAB_PATH}/${ENV_NAME}/bin/jupyter labextension install @krassowski/jupyterlab-lsp
#${JLAB_PATH}/${ENV_NAME}/bin/jupyter serverextension enable --py jupyterlab --sys-prefix
#${JLAB_PATH}/${ENV_NAME}/bin/jupyter serverextension enable --py jupyter_lsp --sys-prefix
#${JLAB_PATH}/${ENV_NAME}/bin/jupyter nbextension enable --py widgetsnbextension

# set the config paths
CONFIG_FILE=${JLAB_CONFIG_DIR}/jupyterhub_config.py
(
cat <<CONFIG
import os
import pwd
from jupyterhub.spawner import LocalProcessSpawner
import subprocess

# groups aren't visible to jupyter via IPA without this custom spawner
# https://github.com/jupyterhub/jupyterhub/issues/1421
def get_gids_from_id(username):
    id_out = subprocess.check_output(['id', username]).decode('ascii')
    _, groups = id_out.strip().split('groups=')
    gids = [int(g.split('(')[0]) for g in groups.split(',')]
    return gids

class MySpawner(LocalProcessSpawner):
    def make_preexec_fn(self, username):
        user = pwd.getpwnam(username)
        uid = user.pw_uid
        gid = user.pw_gid
        home = user.pw_dir
        gids = get_gids_from_id(username)

        def preexec():
            """Set uid/gid of current process
            Executed after fork but before exec by python.
            Also try to chdir to the user's home directory.
            """
            os.setgid(gid)
            os.setgroups(gids)
            os.setuid(uid)

            # start in the user's home dir
            os.chdir(home)

        return preexec

os.umask(0o0007)
c.JupyterHub.spawner_class = MySpawner
c.JupyterHub.authenticator_class = 'jupyterhub.auth.PAMAuthenticator'
c.JupyterHub.bind_url = '${JHUB_PROTO}://localhost:${JHUB_PORT}'
c.JupyterHub.config_file = '${JLAB_CONFIG_DIR}/jupyterhub_config.py'
c.JupyterHub.cookie_secret_file = '${JLAB_CONFIG_DIR}/jupyterhub_cookie_secret'
c.JupyterHub.db_url = 'sqlite:///${JLAB_CONFIG_DIR}/jupyterhub.sqlite'
c.JupyterHub.last_activity_interval = 300
c.JupyterHub.port = 8000
c.Spawner.args = ['--log-level=ERROR']
c.Spawner.cmd = ['jupyter-labhub']
c.Spawner.cpu_limit = 8
c.Spawner.default_url = '/lab'
c.Authenticator.admin_users = {'build','sss'}
c.LocalAuthenticator.create_system_users = False
c.PAMAuthenticator.check_account = True
c.PAMAuthenticator.encoding = 'utf8'
c.PAMAuthenticator.open_sessions = True
c.PAMAuthenticator.service = 'login'
c.NotebookApp.iopub_data_rate_limit = 1.0e10
c.ServerApp.iopub_data_rate_limit = 1.0e10
c.ResourceUseDisplay.mem_limit = 4294967296
c.ResourceUseDisplay.track_cpu_percent = True
c.ResourceUseDisplay.cpu_limit = 2

CONFIG
) > ${CONFIG_FILE}

# disable extension manager
mkdir -p ${JLAB_PATH}/${ENV_NAME}/share/jupyter/lab/settings
EXT_SETTINGS_FILE=${JLAB_PATH}/${ENV_NAME}/share/jupyter/lab/settings/page_config.json
(
cat <<EXT_SETTINGS
{
  "disabledExtensions": [ "@jupyterlab/extensionmanager-extension" ]
}
EXT_SETTINGS
) > ${EXT_SETTINGS_FILE}

# set the service paths, store the file in the env
SERVICE_PATH=${JLAB_PATH}/${ENV_NAME}/usr/lib/systemd/system/
mkdir -p ${SERVICE_PATH}
SERVICE_FILE=${SERVICE_PATH}/jupyterhub.service
(
cat <<SERVICE
[Unit]
Description=JupyterHub
After=syslog.target network.target

[Service]
User=root
Environment="PATH=${JLAB_PATH}/${ENV_NAME}/bin/:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin/"
ExecStart=${JLAB_PATH}/${ENV_NAME}/bin/jupyterhub -f ${JLAB_CONFIG_DIR}/jupyterhub_config.py
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=jupyterhub

[Install]
WantedBy=multi-user.target
SERVICE
) > ${SERVICE_FILE}

# link in the service file
sudo ln -s ${SERVICE_FILE} /usr/lib/systemd/system/jupyterhub.service

# Update the database if needed
${JLAB_PATH}/${ENV_NAME}/bin/jupyterhub upgrade-db

# Tweak the Python kernel file to display the correct Python version
# I think it's easier to overwrite the existing one than edit the old via script
PY3_VER_STRING=$(${JLAB_PATH}/${ENV_NAME}/bin/python${PY3_VER} --version 2>&1)
${JLAB_PATH}/${ENV_NAME}/bin/python3 -m ipykernel install --name python3 --display-name "${PY3_VER_STRING}" --prefix="${JLAB_PATH}/${ENV_NAME}"

export SYSTEMD_PAGER=

sudo systemctl daemon-reload
sudo systemctl enable jupyterhub.service
sudo systemctl start  jupyterhub.service
sudo systemctl status jupyterhub.service

